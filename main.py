import re
import time
from datetime import datetime, timedelta

import aiocron
from aiogram import Bot, Dispatcher, executor
import logging

from aiogram.utils.exceptions import ChatNotFound

from keyboards import *
from database import User
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()
db = User('user.db')
bot = Bot(token="1926597228:AAH7_6Ymsqc_EWLohGphyi9jTOEeWE84tZg")
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)


class FSMall_user(StatesGroup):
    sms = State()


class FSMsub_user(StatesGroup):
    sub_buy = State()


class FSMall_sub_user(StatesGroup):
    sub_all = State()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    admin_id = 1912165183
    if message.from_user.id == admin_id:
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ.', reply_markup=admin_menu)
    else:
        await message.answer('hello', reply_markup=user_menu)
        if not db.all_user(message.from_user.id):
            db.add_user(message.from_user.id)


@dp.message_handler(content_types='text')
async def amin_menu(message: types.Message):
    admin_id = 1912165183
    if message.from_user.id == admin_id:
        if message.text == '–ó–∞—è–≤–∫–∏':
            if len(db.photo_sub()):
                for i in db.photo_sub():
                    global img, user_id
                    img = i[1]
                    user_id = i[0]
                    count = len(db.lenrec())
                    print(i[1])
                    await bot.send_photo(message.from_user.id, i[1], i[0], reply_markup=ok)
                    await message.answer('–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: ' + str(count))
            else:
                await message.answer('–ó–∞—è–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç')
        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            user_all = (db.lenuser())
            sub_all = (db.len_sub_user())
            await message.answer(
                '–ö–æ–ª–∏—á–µ—Å–≤—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π –∑–∞—Ö–æ–¥–∏–≤—à–∏—Ö –≤ –±–æ—Ç–∞:\n ' + str(
                    user_all) + '\n–ö–æ–ª–∏—á–µ—Å–≤—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n' + str(sub_all))
        elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
            await message.answer(
                '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!\n–ù–ï –ó–ê–ë–´–í–ê–ô, –ß–¢–û –£ –¢–ï–õ–ï–ì–†–ê–ú–ê –ï–°–¢–¨ –õ–ò–ú–ò–¢\n–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –æ—Ç—á–µ—Ç!',
                reply_markup=sms)
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!')
    if message.text == '–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—Éüí∞':
        await message.answer('–¢–µ–∫—Å—Ç –æ –ø–æ–¥–ø–∏—Å–∫–µ', reply_markup=in_buy)
    elif message.text == '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏üìÑ':
        status = (re.sub(r"[',(),\]\[]", '', str(db.status_sub(message.from_user.id))))
        print(status)
        await message.answer(
            '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: ' + str(status) + '\n–ó–∞ 2 –¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–ø–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ')
    elif message.text == '–û –ø—Ä–æ–µ–∫—Ç–µüë®‚Äçüíª':
        await message.answer('–¢–µ–∫—Å—Ç')
    else:
        if message.from_user.id != admin_id:
            await message.answer('–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!!')


@dp.message_handler(content_types='text', state=FSMall_user.sms)
async def msg(message: types.Message, state: FSMContext):
    global data
    async with state.proxy() as data:
        data['text'] = message.text
        await state.finish()
        await message.answer('–¢–µ–∫—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ' + data['text'] + '\n–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É',
                             reply_markup=send_msg)


@dp.message_handler(content_types='text', state=FSMall_sub_user.sub_all)
async def msg(message: types.Message, state: FSMContext):
    global data_sub
    async with state.proxy() as data_sub:
        data_sub['text'] = message.text
        await state.finish()
        await message.answer('–¢–µ–∫—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ' + data_sub['text'] + '\n–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É',
                             reply_markup=send_sub_msg)


@dp.message_handler(content_types='photo', state=FSMsub_user.sub_buy)
async def sub(message: types.Message, state: FSMContext):
    global sub
    async with state.proxy() as sub:
        sub['photo'] = message.photo
        await state.finish()
        photo_id = message.photo[-1].file_id
        if not db.buy_user_check(message.from_user.id):
            await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è! ', )
            db.add_sub(message.from_user.id, photo_id)
            await bot.send_message(1912165183, '–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
        else:
            await message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–∫—Ä–∏–Ω, –∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')


@dp.callback_query_handler(text='sub')
async def send_buy(call: types.CallbackQuery):
    main_menu = types.InlineKeyboardMarkup(row_width=1)
    main_menu.add(back)
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã', reply_markup=main_menu)
    await FSMsub_user.sub_buy.set()
    if not FSMsub_user.sub_buy:
        print('a')


@dp.callback_query_handler(text='back')
async def back_menu(call: types.CallbackQuery):
    await call.message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)


@dp.callback_query_handler(text='all_user')
async def back_menu(call: types.CallbackQuery):
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n–î–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –ø–æ–∑–∂–µ –±–¥—É–µ—Ç –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã))')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await FSMall_user.sms.set()


@dp.callback_query_handler(text='no')
async def no(call: types.CallbackQuery):
    await call.message.answer('–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç —Å –≤–∞–º–∏))')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(user_id, '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
    db.del_sub(img)


@dp.callback_query_handler(text='yes')
async def yes(call: types.CallbackQuery):
    await call.message.answer(
        '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ 24 —á–∞—Å–∞ ))')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    my_chat = -1001268450666
    expire_date = datetime.now() + timedelta(days=1)
    link = await bot.create_chat_invite_link(my_chat, expire_date, 1)
    inline = types.InlineKeyboardMarkup()
    url_btn = types.InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', url=link.invite_link)
    inline.add(url_btn)
    await bot.send_message(user_id, '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞', reply_markup=inline)
    db.del_sub(img)
    if not db.all_subuser(user_id):
        db.add_subuser(user_id)
    else:
        db.update_subusers(user_id)


@dp.callback_query_handler(text='sub_user')
async def back_menu(call: types.CallbackQuery):
    await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n –î–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –ø–æ–∑–∂–µ –±–¥—É–µ—Ç –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã))')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await FSMall_sub_user.sub_all.set()


@dp.callback_query_handler(text='send')
async def back_menu(call: types.CallbackQuery):
    await call.message.answer('–û—Ç–ø—Ä–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞—Å—å')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    err = 0
    okk = 0
    for c in db.id_user():
        try:
            id_us = (re.sub(r"[',()]", '', str(c)))
            time.sleep(1)
            await bot.send_message(id_us, data['text'])
            okk += 1
            f = open('send.txt', "w+")
            f.write(str(okk))
            f.close()
            a = open('send.txt')
            b = a.read()
            a.close()
        except ChatNotFound:
            err += 1
            e = open('error.txt', 'w+')
            e.write(str(err))
            e.close()
            er = open('error.txt')
            g = er.read()
            er.close()
    await call.message.answer(
        '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + b + ' subscriber' '\n–ü–æ–∫–∏–Ω—É–ª–∏ –±–æ—Ç–∞: ' + g + ' subscriber')


@dp.callback_query_handler(text='send_sub')
async def back_menu(call: types.CallbackQuery):
    await call.message.answer('–û—Ç–ø—Ä–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∞–ª–∞—Å—å')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    for c in db.id_sub_user():
        try:
            id_us = (re.sub(r"[',()]", '', str(c)))
            time.sleep(1)
            await bot.send_message(id_us, data_sub['text'])
        except ChatNotFound:
            pass
    await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å:')


@aiocron.crontab('30 11  * * *')
async def days():
    for i in db.two_day():
        try:
            day_user = (re.sub(r"[',()]", '', str(i)))
            time.sleep(3)
            await bot.send_message(day_user, '–û—Å—Ç–∞–ª–æ—Å—å  2 –¥–Ω—è –ø–æ–ø–∏—Å–∫–∏')
        except ChatNotFound:
            pass


@aiocron.crontab('30 12 * * *')
async def kick_sving():
    for kik in db.all_finish():
        chat = -1001268450666
        try:
            time.sleep(3)
            unsub_id = (re.sub(r"[',()]", '', str(kik)))
            await bot.kick_chat_member(chat_id=chat, user_id=int(unsub_id))
        except ChatNotFound:
            pass


@aiocron.crontab('30 13 * * *')
async def del_black_list():
    for unban in db.all_finish():
        chat = -1001268450666
        try:
            time.sleep(3)
            unsub_id = (re.sub(r"[',()]", '', str(unban)))
            await bot.unban_chat_member(chat_id=chat, user_id=int(unsub_id))
        except ChatNotFound:
            pass


@aiocron.crontab('0 17 * * *')
async def days():
    for i in db.del_day_sub():
        print(i)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
